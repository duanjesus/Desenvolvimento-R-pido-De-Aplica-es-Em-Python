import tkinter as tk
from tkinter import messagebox
import sqlite3
from datetime import datetime

# Conexão com o banco de dados SQLite
conn = sqlite3.connect('deise_lanches.db')
c = conn.cursor()

# Criação da tabela de fluxo de caixa
c.execute('''CREATE TABLE IF NOT EXISTS caixa
             (id INTEGER PRIMARY KEY, data TEXT, tipo TEXT, valor REAL, descricao TEXT)''')

conn.commit()

# Função para adicionar uma nova transação
def adicionar_transacao(tipo, valor, descricao):
    if not valor or not descricao:
        messagebox.showerror("Erro", "Por favor, preencha todos os campos.")
        return

    try:
        valor = float(valor)
    except ValueError:
        messagebox.showerror("Erro", "Por favor, insira um valor numérico válido.")
        return
    
    data = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with conn:
        c.execute("INSERT INTO caixa (data, tipo, valor, descricao) VALUES (?, ?, ?, ?)",
                  (data, tipo, valor, descricao))
    messagebox.showinfo("Sucesso", "Transação registrada com sucesso!")
    entry_valor.delete(0, tk.END)
    entry_descricao.delete(0, tk.END)

# Função para exibir o saldo atual
def exibir_saldo():
    c.execute("SELECT SUM(valor) FROM caixa WHERE tipo='Entrada'")
    entradas = c.fetchone()[0] or 0
    c.execute("SELECT SUM(valor) FROM caixa WHERE tipo='Saída'")
    saidas = c.fetchone()[0] or 0
    saldo = entradas - saidas
    messagebox.showinfo("Saldo Atual", f"Saldo atual: R$ {saldo:.2f}")

# Função para gerar relatórios
def gerar_relatorio():
    c.execute("SELECT * FROM caixa")
    transacoes = c.fetchall()
    relatorio = "\n".join([f"ID: {t[0]}, Data: {t[1]}, Tipo: {t[2]}, Valor: R$ {t[3]:.2f}, Descrição: {t[4]}" for t in transacoes])
    if not relatorio:
        relatorio = "Nenhuma transação registrada."
    messagebox.showinfo("Relatório de Transações", relatorio)

# Interface gráfica com Tkinter
root = tk.Tk()
root.title("Deise Lanches - Controle de Caixa")

# Nome da lanchonete
label_nome = tk.Label(root, text="Deise Lanches", font=("Arial", 24))
label_nome.pack()

# Campo de entrada para valor e descrição
label_valor = tk.Label(root, text="Valor:")
label_valor.pack()
entry_valor = tk.Entry(root)
entry_valor.pack()

label_descricao = tk.Label(root, text="Descrição:")
label_descricao.pack()
entry_descricao = tk.Entry(root)
entry_descricao.pack()

# Botões para registrar entrada e saída
btn_entrada = tk.Button(root, text="Registrar Entrada", command=lambda: adicionar_transacao('Entrada', entry_valor.get(), entry_descricao.get()))
btn_entrada.pack()

btn_saida = tk.Button(root, text="Registrar Saída", command=lambda: adicionar_transacao('Saída', entry_valor.get(), entry_descricao.get()))
btn_saida.pack()

# Botões para exibir saldo e gerar relatórios
btn_saldo = tk.Button(root, text="Exibir Saldo Atual", command=exibir_saldo)
btn_saldo.pack()

btn_relatorio = tk.Button(root, text="Gerar Relatório", command=gerar_relatorio)
btn_relatorio.pack()

# Fechar a conexão com o banco de dados ao fechar a aplicação
def fechar_conexao():
    conn.close()
    root.destroy()

root.protocol("WM_DELETE_WINDOW", fechar_conexao)

root.mainloop()

